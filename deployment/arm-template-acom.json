{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "principalId": {
            "type": "string",
            "metadata": {
                "description": "The user principal to assign the blob storage cotributor and data contributor role"
            }
        }
    },
    "variables": {
        "prefix": "twt",
        "uniquePrefix": "[concat(variables('prefix'), substring(uniqueString(resourceGroup().id), 0, 6))]",
		"cosmos": {
			"name": "[concat(variables('uniquePrefix'), 'cosmosdb')]"
        },
        "storage": {
            "name": "[concat(variables('uniquePrefix'), 'datastorage')]"
        },
        "synapse": {
            "name": "[concat(variables('uniquePrefix'), 'synapse')]",
            "defaultDataLakeStorageAccountUrl": "[concat('https://', variables('uniquePrefix'), 'datastorage', '.dfs.core.windows.net')]",
            "sql": {
                "admin": "sqladminuser",
                "password": "M1cr0s0ft2020"
            }
        },
        "storageRoleUniqueId": {
            "value": "[guid('StorageRole', variables('prefix'))]"
        },
        "storageBlobDataContributorRoleID": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
        "ownerRoleID": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
        "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
	},
    "resources": [
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2020-04-01",
            "name": "[variables('cosmos').name]",
            "location": "[resourceGroup().location]",
            "tags": {
                "defaultExperience": "Core (SQL)",
                "hidden-cosmos-mmspecial": "",
                "CosmosAccountType": "Non-Production"
            },
            "kind": "GlobalDocumentDB",
            "properties": {
                "publicNetworkAccess": "Enabled",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "disableKeyBasedMetadataWriteAccess": false,
                "enableFreeTier": false,
                "enableAnalyticalStorage": true,
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session",
                    "maxIntervalInSeconds": 5,
                    "maxStalenessPrefix": 100
                },
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]",
                        "provisioningState": "Succeeded",
                        "failoverPriority": 0,
                        "isZoneRedundant": false
                    }
                ],
                "capabilities": [],
                "ipRules": []
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('cosmos').name, '/InventoryDB')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos').name)]"
            ],
            "properties": {
                "resource": {
                    "id": "InventoryDB"
                },
                "options": {}
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('cosmos').name, '/InventoryDB/draftorders')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos').name, 'InventoryDB')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos').name)]"
            ],
            "properties": {
                "resource": {
                    "id": "draftorders",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/draftorders"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                },
                "options": {}
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('cosmos').name, '/InventoryDB/inventory')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos').name, 'InventoryDB')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos').name)]"
            ],
            "properties": {
                "resource": {
                    "id": "inventory",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/inventory"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    },
                    "analyticalStorageTtl": -1
                },
                "options": {}
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('cosmos').name, '/InventoryDB/sales')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos').name, 'InventoryDB')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos').name)]"
            ],
            "properties": {
                "resource": {
                    "id": "sales",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/sales"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    },
                    "analyticalStorageTtl": -1
                },
                "options": {}
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('cosmos').name, '/InventoryDB/draftorders/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('cosmos').name, 'InventoryDB', 'draftorders')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos').name, 'InventoryDB')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos').name)]"
            ],
            "properties": {
                "resource": {
                    "throughput": 400,
                    "autoscaleSettings": {
                        "maxThroughput": 4000
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('cosmos').name, '/InventoryDB/inventory/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('cosmos').name, 'InventoryDB', 'inventory')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos').name, 'InventoryDB')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos').name)]"
            ],
            "properties": {
                "resource": {
                    "throughput": 400,
                    "autoscaleSettings": {
                        "maxThroughput": 4000
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('cosmos').name, '/InventoryDB/sales/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('cosmos').name, 'InventoryDB', 'sales')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos').name, 'InventoryDB')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos').name)]"
            ],
            "properties": {
                "resource": {
                    "throughput": 400,
                    "autoscaleSettings": {
                        "maxThroughput": 4000
                    }
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('storage').name]",
            "location": "[resourceGroup().location]",
            "sku": {
				"name": "Standard_RAGRS",
				"tier": "Standard"
			},
            "kind": "StorageV2",
            "properties": {
                "isHnsEnabled": true,
                "networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": [],
					"defaultAction": "Allow"
				},
				"supportsHttpsTrafficOnly": false,
				"encryption": {
					"services": {
						"file": {
							"keyType": "Account",
							"enabled": true
						},
						"blob": {
							"keyType": "Account",
							"enabled": true
						}
					},
					"keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storage').name, '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storage').name, '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storage').name, '/default/analytics')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage').name, 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storage').name, '/default/staging')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage').name, 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
		{
			"type": "Microsoft.Synapse/workspaces",
			"apiVersion": "2019-06-01-preview",
			"name": "[variables('synapse').name]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
			],
			"identity": {
				"type": "SystemAssigned"
			},
			"properties": {
				"defaultDataLakeStorage": {
					"accountUrl": "[variables('synapse').defaultDataLakeStorageAccountUrl]",
					"filesystem": "analytics"
				},
				"virtualNetworkProfile": {
					"computeSubnetId": ""
				},
				"sqlAdministratorLogin": "[variables('synapse').sql.admin]",
				"sqlAdministratorLoginPassword": "[variables('synapse').sql.password]"
			},
			"resources": [
			]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('storage').name, '/Microsoft.Authorization/', guid(concat(resourceGroup().id, '/', variables('storageBlobDataContributorRoleID'), '/', variables('synapse').name, '/', variables('storageRoleUniqueId').value)))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleID'))]",
                "principalId": "[reference(concat('Microsoft.Synapse/workspaces/', variables('synapse').name), '2019-06-01-preview', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('storage').name, '/Microsoft.Authorization/',  guid(concat(resourceGroup().id, '/', variables('ownerRoleID'), '/', variables('synapse').name, '/', variables('storageRoleUniqueId').value)))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('ownerRoleID'))]",
                "principalId": "[reference(concat('Microsoft.Synapse/workspaces/', variables('synapse').name), '2019-06-01-preview', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('storage').name, '/Microsoft.Authorization/', guid(concat(resourceGroup().id, '/', variables('contributorRoleID'), '/', variables('synapse').name, '/', variables('storageRoleUniqueId').value)))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleID'))]",
                "principalId": "[reference(concat('Microsoft.Synapse/workspaces/', variables('synapse').name), '2019-06-01-preview', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('storage').name, '/Microsoft.Authorization/',  guid(concat(resourceGroup().id, '/', variables('ownerRoleID'), '/', parameters('principalId'), '/', variables('storageRoleUniqueId').value)))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleID'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('storage').name, '/Microsoft.Authorization/', guid(concat(resourceGroup().id, '/', variables('storageBlobDataContributorRoleID'), '/',  parameters('principalId'), '/', variables('storageRoleUniqueId').value)))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleID'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/bigDataPools",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/sparkpool')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "creationDate": "2020-06-20T00:13:41.7966667Z",
                "sparkVersion": "2.4",
                "nodeCount": 3,
                "nodeSize": "Small",
                "nodeSizeFamily": "MemoryOptimized",
                "autoScale": {
                    "enabled": true,
                    "minNodeCount": 3,
                    "maxNodeCount": 3
                },
                "autoPause": {
                    "enabled": true,
                    "delayInMinutes": 15
                },
                "provisioningState": "Succeeded"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/firewallRules",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/allowAll')]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/firewallRules",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/AllowAllWindowsAzureIps')]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/integrationruntimes",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/AutoResolveIntegrationRuntime')]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/sqlPools",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/sqlpool')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "sku": {
                "name": "DW100c",
                "capacity": 0
            },
            "properties": {
                "status": "Paused",
                "maxSizeBytes": 263882790666240,
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "restorePointInTime": "0001-01-01T00:00:00",
                "creationDate": "2020-06-22T18:11:36.613Z",
                "provisioningState": "Succeeded"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/sqlPools/auditingSettings",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/sqlpool/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces/sqlPools', variables('synapse').name, 'sqlpool')]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "state": "Disabled",
                "retentionDays": 0,
                "auditActionsAndGroups": [],
                "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000",
                "isStorageSecondaryKeyInUse": false,
                "isAzureMonitorTargetEnabled": false
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/sqlPools/securityAlertPolicies",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/sqlpool/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces/sqlPools', variables('synapse').name, 'sqlpool')]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "state": "Disabled",
                "disabledAlerts": [
                    ""
                ],
                "emailAddresses": [
                    ""
                ],
                "emailAccountAdmins": false,
                "retentionDays": 0
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/sqlPools/transparentDataEncryption",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/sqlpool/current')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces/sqlPools', variables('synapse').name, 'sqlpool')]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "status": "Disabled"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/sqlpool/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces/sqlPools', variables('synapse').name, 'sqlpool')]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "recurringScans": {
                    "isEnabled": false,
                    "emailSubscriptionAdmins": true
                }
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/managedIdentitySqlControlSettings",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('synapse').name, '/default')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('synapse').name)]"
            ],
            "properties": {
                "grantSqlControlToManagedIdentity": {
                    "desiredState": "Enabled"
                }
            }
        }
    ],
    "outputs": {
      "CosmosDB Connection String": {
        "type": "string",
        "value": "[concat('AccountEndpoint=https://', variables('cosmos').name, '.documents.azure.com:443/;AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos').name),'2020-04-01').primaryMasterKey, ';Database=InventoryDB')]"
      }
    }
}